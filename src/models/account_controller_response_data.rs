/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountControllerResponseData {
    #[serde(rename = "nonce")]
    pub nonce: f64,
    #[serde(rename = "balance")]
    pub balance: String,
    #[serde(rename = "transaction_hash", skip_serializing_if = "Option::is_none")]
    pub transaction_hash: Option<String>,
    #[serde(rename = "signed_transaction", skip_serializing_if = "Option::is_none")]
    pub signed_transaction: Option<String>,
    #[serde(rename = "raw_transaction", skip_serializing_if = "Option::is_none")]
    pub raw_transaction: Option<String>,
    #[serde(rename = "data")]
    pub data: String,
    #[serde(rename = "transactions", skip_serializing_if = "Option::is_none")]
    pub transactions: Option<Vec<crate::models::TransactionData>>,
    #[serde(rename = "moon_scan_url", skip_serializing_if = "Option::is_none")]
    pub moon_scan_url: Option<String>,
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
    #[serde(rename = "transaction", skip_serializing_if = "Option::is_none")]
    pub transaction: Option<Box<crate::models::Tx>>,
    #[serde(rename = "userOps", skip_serializing_if = "Option::is_none")]
    pub user_ops: Option<Vec<crate::models::TransactionRequest>>,
    #[serde(rename = "userop_transaction", skip_serializing_if = "Option::is_none")]
    pub userop_transaction: Option<String>,
    #[serde(rename = "keys", skip_serializing_if = "Option::is_none")]
    pub keys: Option<Vec<String>>,
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    #[serde(rename = "header", skip_serializing_if = "Option::is_none")]
    pub header: Option<bool>,
    #[serde(rename = "signtype", skip_serializing_if = "Option::is_none")]
    pub signtype: Option<bool>,
    #[serde(rename = "domain")]
    pub domain: String,
    #[serde(rename = "current_atoken_balance")]
    pub current_atoken_balance: String,
    #[serde(rename = "current_borrow_balance")]
    pub current_borrow_balance: String,
    #[serde(rename = "principal_borrow_balance")]
    pub principal_borrow_balance: String,
    #[serde(rename = "borrow_rate_mode")]
    pub borrow_rate_mode: String,
    #[serde(rename = "borrow_rate")]
    pub borrow_rate: String,
    #[serde(rename = "liquidity_rate")]
    pub liquidity_rate: String,
    #[serde(rename = "origination_fee")]
    pub origination_fee: String,
    #[serde(rename = "variable_borrow_index")]
    pub variable_borrow_index: String,
    #[serde(rename = "last_update_timestamp")]
    pub last_update_timestamp: String,
    #[serde(rename = "usage_as_collateral_enabled")]
    pub usage_as_collateral_enabled: String,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<f64>,
    #[serde(rename = "chain_id", skip_serializing_if = "Option::is_none")]
    pub chain_id: Option<f64>,
    #[serde(rename = "gas", skip_serializing_if = "Option::is_none")]
    pub gas: Option<String>,
    #[serde(rename = "gas_price", skip_serializing_if = "Option::is_none")]
    pub gas_price: Option<String>,
    #[serde(rename = "gas_tip_cap", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gas_tip_cap: Option<Option<String>>,
    #[serde(rename = "gas_fee_cap", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gas_fee_cap: Option<Option<String>>,
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(rename = "to", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub to: Option<Option<String>>,
    #[serde(rename = "blob_gas", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub blob_gas: Option<Option<String>>,
    #[serde(rename = "blob_gas_fee_cap", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub blob_gas_fee_cap: Option<Option<String>>,
    #[serde(rename = "blob_hashes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub blob_hashes: Option<Option<Vec<String>>>,
    #[serde(rename = "v", skip_serializing_if = "Option::is_none")]
    pub v: Option<String>,
    #[serde(rename = "r", skip_serializing_if = "Option::is_none")]
    pub r: Option<String>,
    #[serde(rename = "s", skip_serializing_if = "Option::is_none")]
    pub s: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "decimals", skip_serializing_if = "Option::is_none")]
    pub decimals: Option<String>,
    #[serde(rename = "totalSupply", skip_serializing_if = "Option::is_none")]
    pub total_supply: Option<String>,
    #[serde(rename = "contract_address", skip_serializing_if = "Option::is_none")]
    pub contract_address: Option<String>,
    #[serde(rename = "balanceOf", skip_serializing_if = "Option::is_none")]
    pub balance_of: Option<String>,
    #[serde(rename = "allowance", skip_serializing_if = "Option::is_none")]
    pub allowance: Option<String>,
    #[serde(rename = "balance_of", skip_serializing_if = "Option::is_none")]
    pub balance_of: Option<String>,
    #[serde(rename = "balance_of_batch", skip_serializing_if = "Option::is_none")]
    pub balance_of_batch: Option<String>,
    #[serde(rename = "success")]
    pub success: bool,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "signedTx", skip_serializing_if = "Option::is_none")]
    pub signed_tx: Option<String>,
    #[serde(rename = "owner_of", skip_serializing_if = "Option::is_none")]
    pub owner_of: Option<String>,
    #[serde(rename = "token_uri", skip_serializing_if = "Option::is_none")]
    pub token_uri: Option<String>,
    #[serde(rename = "isApprovedForAll", skip_serializing_if = "Option::is_none")]
    pub is_approved_for_all: Option<String>,
}

impl AccountControllerResponseData {
    pub fn new(nonce: f64, balance: String, data: String, address: String, domain: String, current_atoken_balance: String, current_borrow_balance: String, principal_borrow_balance: String, borrow_rate_mode: String, borrow_rate: String, liquidity_rate: String, origination_fee: String, variable_borrow_index: String, last_update_timestamp: String, usage_as_collateral_enabled: String, success: bool, message: String) -> AccountControllerResponseData {
        AccountControllerResponseData {
            nonce,
            balance,
            transaction_hash: None,
            signed_transaction: None,
            raw_transaction: None,
            data,
            transactions: None,
            moon_scan_url: None,
            signature: None,
            transaction: None,
            user_ops: None,
            userop_transaction: None,
            keys: None,
            address,
            name: None,
            encoding: None,
            header: None,
            signtype: None,
            domain,
            current_atoken_balance,
            current_borrow_balance,
            principal_borrow_balance,
            borrow_rate_mode,
            borrow_rate,
            liquidity_rate,
            origination_fee,
            variable_borrow_index,
            last_update_timestamp,
            usage_as_collateral_enabled,
            r#type: None,
            chain_id: None,
            gas: None,
            gas_price: None,
            gas_tip_cap: None,
            gas_fee_cap: None,
            value: None,
            from: None,
            to: None,
            blob_gas: None,
            blob_gas_fee_cap: None,
            blob_hashes: None,
            v: None,
            r: None,
            s: None,
            symbol: None,
            decimals: None,
            total_supply: None,
            contract_address: None,
            balance_of: None,
            allowance: None,
            balance_of: None,
            balance_of_batch: None,
            success,
            message,
            signed_tx: None,
            owner_of: None,
            token_uri: None,
            is_approved_for_all: None,
        }
    }
}


