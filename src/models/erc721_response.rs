/*
 * moon-vault-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Erc721Response {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<f64>,
    #[serde(rename = "chain_id", skip_serializing_if = "Option::is_none")]
    pub chain_id: Option<f64>,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    #[serde(rename = "gas", skip_serializing_if = "Option::is_none")]
    pub gas: Option<String>,
    #[serde(rename = "gas_price", skip_serializing_if = "Option::is_none")]
    pub gas_price: Option<String>,
    #[serde(rename = "gas_tip_cap", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gas_tip_cap: Option<Option<String>>,
    #[serde(rename = "gas_fee_cap", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gas_fee_cap: Option<Option<String>>,
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "nonce", skip_serializing_if = "Option::is_none")]
    pub nonce: Option<f64>,
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(rename = "to", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub to: Option<Option<String>>,
    #[serde(rename = "blob_gas", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub blob_gas: Option<Option<String>>,
    #[serde(rename = "blob_gas_fee_cap", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub blob_gas_fee_cap: Option<Option<String>>,
    #[serde(rename = "blob_hashes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub blob_hashes: Option<Option<Vec<String>>>,
    #[serde(rename = "v", skip_serializing_if = "Option::is_none")]
    pub v: Option<String>,
    #[serde(rename = "r", skip_serializing_if = "Option::is_none")]
    pub r: Option<String>,
    #[serde(rename = "s", skip_serializing_if = "Option::is_none")]
    pub s: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "balance_of", skip_serializing_if = "Option::is_none")]
    pub balance_of: Option<String>,
    #[serde(rename = "owner_of", skip_serializing_if = "Option::is_none")]
    pub owner_of: Option<String>,
    #[serde(rename = "token_uri", skip_serializing_if = "Option::is_none")]
    pub token_uri: Option<String>,
    #[serde(rename = "contract_address", skip_serializing_if = "Option::is_none")]
    pub contract_address: Option<String>,
    #[serde(rename = "isApprovedForAll", skip_serializing_if = "Option::is_none")]
    pub is_approved_for_all: Option<String>,
}

impl Erc721Response {
    pub fn new() -> Erc721Response {
        Erc721Response {
            r#type: None,
            chain_id: None,
            data: None,
            gas: None,
            gas_price: None,
            gas_tip_cap: None,
            gas_fee_cap: None,
            value: None,
            nonce: None,
            from: None,
            to: None,
            blob_gas: None,
            blob_gas_fee_cap: None,
            blob_hashes: None,
            v: None,
            r: None,
            s: None,
            name: None,
            symbol: None,
            balance_of: None,
            owner_of: None,
            token_uri: None,
            contract_address: None,
            is_approved_for_all: None,
        }
    }
}


